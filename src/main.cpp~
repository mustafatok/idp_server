#include <fstream>
#include <iostream>
#include <thread>
#include <vector>
#include <string>
#include <sstream>

#include "input/input.h"
#include "input/camera.h"
#include "input/file.h"
#include "input/multifile.h"
#include "encoder/encoder.h"
#include "encoder/multiencoder.h"
#include "output/network.h"
#include "tools/timer.h"
#include "drdc.h"

using namespace std;

MultiFileInput *videoInput;
// MultiFileInput videoInput("camera", "Allied Vision Technologies-50-0536874357", "Allied Vision Technologies-50-0536872642");

MultiH264Encoder *encoder = nullptr;
UdpSocket output;
int mode = -1;
thread *encoderThread = nullptr;

void inputCallback(int x, int y){
	if(videoInput != nullptr)
		videoInput->setInputOffset(x, y);
}

void positionCallback(float x, float y, float z){
	//std::cout << x << " " << y << " " << z << std::endl;
	double _x; double _y; double _z;
	drdGetPos (&_x, &_y, &_z, false);
	//std::cout << _x << " " << _y << " " << _z << std::endl;

	if(!drdIsMoving ())drdMoveToPos (_x - y, _y - x, _z + z, false);
	// drdMoveToPos (_x + x, _y + y, _z + z, false);
	//std::cout << _x - x << " " << _y - y << " " << _z - z << std::endl;
}

void init(){
	output.initClientParameters(mode, encoder->lWidth(), encoder->lHeight(), encoder->rWidth(), encoder->rHeight());
	output.setInputCallback(&inputCallback);
	output.setPositionCallback(&positionCallback);
	if (encoderThread == nullptr) {
		encoderThread = new thread([&](){
			(*videoInput)();
		});
	}
}
void onNewConnection(struct sockaddr_in*, int) {
	cout << "onNewConnection called" << endl;
	init();
}

void onCloseConnection(struct sockaddr_in*, int) {
	if (encoderThread != nullptr) {
		cout << "onCloseConnection called" << endl;
		videoInput->stop();
		encoder->stop();
		encoderThread->join();
		delete encoderThread;
		encoderThread = nullptr;
	}
}

bool initDevice(){
	// open the first available device
	if (drdOpen () < 0) {
		printf ("error: cannot open device (%s)\n", dhdErrorGetLastStr ());
		dhdSleep (2.0);
		return false;
	}

	// initialize if necessary
	if (!drdIsInitialized() && (drdAutoInit() < 0)) {
		printf ("error: initialization failed (%s)\n", dhdErrorGetLastStr ());
		dhdSleep (2.0);
		return false;
	}
	  // start robot control loop
	if (drdStart() < 0) {
		printf ("error: control loop failed to start properly (%s)\n", dhdErrorGetLastStr ());
		dhdSleep (2.0);
		return -1;
	}

	return true;
}
int main(int argc, char* argv[])
{
	initDevice();
	bool camera = false;
	for(int i = 1; i < argc; ++i) {
		std::string value(argv[i]);
		if (value == "--camera") {
			camera = true;
		}
	}

	int prevMode = -1;
	int prevResizeFactor = -1;
	string input;
	for(;;) {
		cin >> input;

		if (input == "exit") {
				break;
		}

		std::cout << input << std::endl;
		std::stringstream ss(input);
		std::string item;
		std::vector<std::string> elems;
		while (std::getline(ss, item, ';')) {
		    elems.push_back(item);
		}
		if(elems.size() != 6)
			continue;
		
		int inputMode = stoi(elems[0]);
		int rbitRate = stoi(elems[1]);
		int lbitRate = 1000 - rbitRate;
		int resizeFactor = stoi(elems[2]);
		int blurSizeX = stoi(elems[3]);
		int stdX = stoi(elems[4]);
		int stdY = stoi(elems[5]);
		
		if(inputMode == prevMode && encoder != nullptr){
			encoder->setBitRate(lbitRate, rbitRate);
			encoder->setResizeFactor(resizeFactor);
			encoder->setBlurParams(blurSizeX, stdX, stdY);
			if(prevResizeFactor == resizeFactor)
				continue;
			else
				prevResizeFactor = resizeFactor;
		}
		if (inputMode == 1) {
			mode = (int) MODE_VERTICALCONCAT;
			cout << "MODE_BEST - 1000" << endl;
		}else if (inputMode == 2) {
			cout << "MODE_LEFTRESIZED - " << lbitRate << " - "  << rbitRate << endl;
			mode = (int) MODE_LEFTRESIZED;
		}else if (inputMode == 3) {
			cout << "MODE_RIGHTRESIZED - " << lbitRate << " - "  << rbitRate  << endl;
			mode = (int) MODE_RIGHTRESIZED;
		}else if (inputMode == 4) {
			cout << "MODE_LEFTBLURRED - " << lbitRate << " - "  << rbitRate  << endl;
			mode = (int) MODE_LEFTBLURRED;
		}else if (inputMode == 5) {
			cout << "MODE_RIGHTBLURRED - " << lbitRate << " - "  << rbitRate  << endl;
			mode = (int) MODE_RIGHTBLURRED;
		}else if (inputMode == 6) {
			cout << "MODE_SINGLE - " << lbitRate << " - "  << rbitRate  << endl;
			mode = (int) MODE_SINGLE;
		}

		prevMode = inputMode;
		bool flag = false;
		if(encoder == nullptr){
			output.setConnectionCallback(onNewConnection);
			output.setCloseConnectionCallback(onCloseConnection);

			if (!output.initServer(2525)) {
				cerr << "Could not initiate udp socket." << endl;
				return -1;
			}
		}else{
			videoInput->stop();
			encoder->stop();
			encoderThread->join();
			delete encoderThread;
			delete encoder;
			delete videoInput;
			flag = true;
			encoderThread = nullptr;
			 

		}
		if(camera){
			videoInput = new MultiFileInput("camera", "Allied Vision Technologies-50-0536874357", "Allied Vision Technologies-50-0536872642");
		}else{
			videoInput = new MultiFileInput("file", "/LEFT.mp4", "/RIGHT.mp4");
		}

		if(videoInput->type() == "camera"){
			encoder = new MultiH264Encoder(mode, 960, 544, resizeFactor);
			encoder->setFps(25);
		}else{
			encoder = new MultiH264Encoder(mode, 960, 544, resizeFactor);
			encoder->setFps(25);
		}
		
		encoder->setBitRate(lbitRate, rbitRate);
		encoder->setResizeFactor(resizeFactor);
		encoder->setBlurParams(blurSizeX, stdX, stdY);
		encoder->setEncoderObserver(0, &output);
		videoInput->setInputObserver(0, encoder);

		if(flag)
			init();
		// videoInput->start();

	}
	
	// TODO: cleanup

	return 0;
}
